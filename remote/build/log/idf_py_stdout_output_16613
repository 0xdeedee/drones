[1/11] Linking C static library esp-idf/wifi_provisioning/libwifi_provisioning.a
[2/11] Performing build step for 'bootloader'
[1/1] cd /Users/deedee/devel/drones/remote/build/bootloader/esp-idf/esptool_py && /Users/deedee/.espressif/python_env/idf5.1_py3.11_env/bin/python /Users/deedee/devel/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x0 /Users/deedee/devel/drones/remote/build/bootloader/bootloader.bin
Bootloader binary size 0x5210 bytes. 0x2df0 bytes (36%) free.
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/blink_example_main.c.obj
[4/9] Linking C static library esp-idf/main/libmain.a
[5/9] Generating ld/sections.ld
[6/9] Building C object CMakeFiles/blink.elf.dir/project_elf_src_esp32s3.c.obj
[7/9] Linking CXX executable blink.elf
[8/9] Generating binary image from built executable
esptool.py v4.6.2
Creating esp32s3 image...
Merged 2 ELF sections
Successfully created esp32s3 image.
Generated /Users/deedee/devel/drones/remote/build/blink.bin
[9/9] cd /Users/deedee/devel/drones/remote/build/esp-idf/esptool_py && /Users/deedee/.espressif/python_env/idf5.1_py3.11_env/bin/python /Users/deedee/devel/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /Users/deedee/devel/drones/remote/build/partition_table/partition-table.bin /Users/deedee/devel/drones/remote/build/blink.bin
blink.bin binary size 0x384e0 bytes. Smallest app partition is 0x100000 bytes. 0xc7b20 bytes (78%) free.
